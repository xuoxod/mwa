<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">


    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

    <link href="/static/css/style.css" rel="stylesheet">

    <link rel="icon" type="image/x-icon" href="/static/favicon.ico">

    <title>
        {{ if (isset(.title)) == true }}
        {{.title}}
        {{end}}

        {{if (isset(title))}}
        {{title}}
        {{end}}
    </title>
</head>

<body>
    {{ if (isset(.auth)) == true }}
    {{include "partials/_authmenu.jet"}}
    {{end}}
    {{ if (isset(.auth)) == false }}
    {{include "partials/_unauthmenu.jet"}}
    {{end}}
    <div class="container-fluid" style="margin:5% auto;">
        {{block documentBody()}}{{end}}
    </div>

    <div class="position-sticky mb-auto d-grid align-items-end fs-tiny justify-content-center">
        &copy; {{copyright}}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous">
        </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
        integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
        crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        const log = (msg) => console.log(msg);

        const stringify = (obj) => JSON.stringify(obj);

        const parser = (strObj) => JSON.parse(strObj);

        const addHandler = (theElement, whichEvent, method) => {
            if (null != theElement && null != whichEvent && typeof method == "function") {
                theElement.addEventListener(whichEvent, method);
            }
        };

        const addClickHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "click", handler);
            }
        };

        const addKeyupHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "keyup", handler);
            }
        };

        const addKeydownHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "keydown", handler);
            }
        };

        const addOnFocusHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "focus", handler);
            }
        };

        const addOnChangeHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "change", handler);
            }
        };

        const addOffFocusHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "focusout", handler);
            }
        };

        const appendChild = (parent, child) => {
            if (null != parent && null != child) {
                parent.appendChild(child);
            }
        };

        const appendBeforeLastChild = (parent, child) => {
            if (null != parent && null != child) {
                const lastChildIndex = parent.children.length - 1;
                const lastChild = parent.children[lastChildIndex];
                parent.insertBefore(child, lastChild);
            }
        };

        const append = (parent, child) => {
            parent.append(child);
        };

        const removeChildren = (parent) => {
            parent.querySelectorAll("*").forEach((dialog) => {
                dialog.remove();
            });
        };

        const countChildren = (parent) => {
            if (null != parent) {
                return parent.children.length;
            }
            return null;
        };

        const addAttribute = (theElement, whichAttribute, attributeValue) => {
            if (null != theElement) {
                theElement.setAttribute(whichAttribute, attributeValue);
            }
        };

        const setAttribute = (theElement, whichAttribute, attributeValue) => {
            if (null != theElement) {
                theElement.setAttribute(whichAttribute, attributeValue);
            }
        };

        const getAttribute = (theElement, whichAttribute) => {
            if (null != theElement && null != whichAttribute) {
                return theElement.getAttribute(`${whichAttribute}`) || null;
            }
            return "Element is null";
        };

        const removeAttribute = (theElement, whichAttribute) => {
            if (null != theElement) {
                if (theElement.hasAttribute(whichAttribute)) {
                    theElement.removeAttribute(whichAttribute);
                }
            }
        };

        const getElement = (nameIdClass) => {
            let element = null;
            if (null != (element = document.querySelector(`${nameIdClass}`))) {
                return element;
            }
            if (null != (element = document.querySelector(`#${nameIdClass}`))) {
                return element;
            }
            if (null != (element = document.querySelector(`.${nameIdClass}`))) {
                return element;
            }
            return null;
        };

        const cap = (arg) => {
            let word_split = null,
                line = "",
                word = arg.toString();
            if (null !== word && undefined !== word) {
                if (
                    word.trim().toLowerCase() === "id" ||
                    word.trim().toLowerCase() === "ssn" ||
                    word.trim().toLowerCase() === "sku" ||
                    word.trim().toLowerCase() === "vm" ||
                    word.trim().toLowerCase() === "mac" ||
                    word.trim().toLowerCase() === "imei" ||
                    word.trim().toLowerCase() === "os" ||
                    word.trim().toLowerCase() === "atm" ||
                    word.trim().toLowerCase() === "pa" ||
                    word.trim().toLowerCase() === "rjw"
                ) {
                    return word.toUpperCase();
                } else if (word.match(/[-]/)) {
                    if (null !== (word_split = word.split(["-"])).length > 0) {
                        for (let i = 0; i < word_split.length; i++) {
                            if (i < word_split.length - 1) {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1) +
                                    "-";
                            } else {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1);
                            }
                        }
                        return line;
                    }
                } else if (word.match(/[ ]/)) {
                    if (null !== (word_split = word.split([" "])).length > 0) {
                        for (let i = 0; i < word_split.length; i++) {
                            if (i < word_split.length - 1) {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1) +
                                    " ";
                            } else {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1);
                            }
                        }
                        return line;
                    }
                } else {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                }
            }
        };

        const newElement = (type) => {
            if (null != type && typeof type == "string") {
                return document.createElement(type);
            }
            return null;
        };

        // notify display a custom alert to user 
        // type string: success, error or warning
        // msg string: message to user 
        const notify = (type, msg) => {
            notie.alert({
                type: type,
                text: msg,
            });
        };

        // modal display custom modal 
        // title string: modal's title 
        // text string: the message to user
        // icon built-in: success, warning, error, info or question
        // btnText string: button's text
        const modal = (title, text, icon, btnText = "Okay", btnClose = true, showStatus = true) => {
            Swal.fire({
                title: title,
                text: text,
                icon: icon,
                confirmButtonText: btnText,
                showCloseButton: btnClose,
                showLoading: showStatus
            });
        };

    </script>

    {{ if (isset(error) ? true : false) }}
    <script>
        notify("{{.type}}", "{{.msg}}");
    </script>
    {{end}}

    {{ if (isset(public) ? true : false) }}
    <script>
        let socket = null;
        const idInput = document.querySelector("#id");
        const idComp = document.querySelector("#ipaddress")
        const chatWindow = document.querySelector("#chat-window");
        const chatWindowToggle = document.querySelector("#chat-window-toggle");
        const submitButton = document.querySelector("#submit-button");
        const registerGroup = document.querySelector("#register-group");
        const usernameInput = document.querySelector("#username-input");
        const sendMessageGroup = document.querySelector("#send-message-group");
        const sendButton = document.querySelector("#send-button");
        const messageInput = document.querySelector("#message-input");
        const userNameInput = document.querySelector("#username");
        const chatTranscript = document.querySelector("#chat-transcript");
        const chatWindowToggleLi = document.querySelector("#chat-window-toggle-li");
        const onlineStatusCheckbox = document.querySelector("#online-status-checkbox");
        const onlineStatusLabel = document.querySelector("#online-status-label");


        const populateOnlineUserCount = data => {
            log(`Server refreshed client list\n`);

            const clients = data.clients;
            if (null != clients) {
                if (clients) {
                    checkOnlineStatus(clients);

                    if (null != clients) {
                        log(`\nOnline Clients:\t${stringify(clients)}\n`);

                        const liParent = getElement("#online-chat-clients");

                        removeChildren(liParent);

                        for (c in clients) {
                            if (clients[c][2] == true || clients[c][2] == "true") {
                                const li = newElement("li");
                                const msgIcon = newElement("i");
                                const trashIcon = newElement("i");
                                const pUsername = newElement("input");
                                const dGroup = newElement("div");
                                const dGroupText = newElement("span");
                                const eGroupText = newElement("span");

                                addAttribute(li, "class", "list-group-item");
                                addAttribute(li, "id", `li-${clients[c][0]}`);
                                addAttribute(msgIcon, "id", `${clients[c][1]}`);
                                addAttribute(msgIcon, "class", "bi bi-chat-square-text-fill text-left send-message-icon");
                                addAttribute(trashIcon, "id", `trash-${clients[c][1]}`);
                                addAttribute(trashIcon, "class", "bi bi-x-circle-fill text-left trash-icon");
                                addAttribute(dGroup, "class", "input-group");
                                addAttribute(dGroupText, "class", "input-group-text");
                                addAttribute(eGroupText, "class", "input-group-text");
                                addAttribute(pUsername, "class", "form-control text-center fw-bold border-0");
                                addAttribute(pUsername, "type", "text");
                                addAttribute(pUsername, "readonly", "true");
                                addAttribute(pUsername, "value", `${cap(clients[c][0])}`);

                                appendChild(li, dGroup);
                                appendChild(dGroup, dGroupText);
                                appendChild(dGroupText, msgIcon);
                                appendChild(eGroupText, trashIcon);
                                appendChild(dGroup, pUsername);
                                appendChild(liParent, li);

                                if (clients[c][0].toLowerCase().trim() == userNameInput.value.toLowerCase().trim()) {
                                    appendChild(dGroup, eGroupText);
                                }
                            }
                        }
                    }
                }
            } else {

                onlineUsers.innerHTML = `<span class="fs-3"><strong>${0}</strong></span>`;
            }
        };

        const handleBroadcast = (data) => {
            log(`Received a broadcast message\n\tFrom:\t${data.from}\n\tMessage:\t${data.message}\n`);

            const message = data.message;
            const from = data.from;
            const para = newElement("p");
            const row = newElement("div");

            para.innerHTML = `<strong>${cap(from)}</strong>: ${message}`;

            addAttribute(row, "class", "row mx-2");

            if (from.trim() == userNameInput.value.trim()) {
                addAttribute(para, "class", "text-start d-inline-block border rounded bg-info-subtle d-inline-block m-1 p-1");
            } else {
                addAttribute(para, "class", "text-end d-inline-block border rounded bg-info-subtle bg-warning-subtle d-inline-block border rounded m-1 p-1");
            }

            appendChild(chatTranscript, row);
            appendChild(row, para);

        }

        const handleAlert = data => {
            const title = data.title;
            const message = data.message;
            const level = data.level;
            modal(title, message, level);
        };

        const handleBadUsername = data => {
            log("username is bad");
            const title = data.title;
            const level = data.level;
            const message = data.message;

            modal(title, message, level);
        };

        const handleGoodUsername = data => {
            const username = data.message;
            userNameInput.value = cap(username);
            registerGroup.classList.add("d-none");
            sendMessageGroup.classList.remove("d-none");

            const jsonData = {};
            jsonData.action = "chat-users";
            jsonData.id = idInput.value;
            socket.send(stringify(jsonData));
        };

        const handleComfirmation = data => {
            log(`Server confirmed my connection\n`);
            const id = data.id;

            idInput.value = id;
            idComp.innerText = `${id}`;
            const jsonData = {};
            jsonData.action = "thankyou";
            socket.send(stringify(jsonData));
        };

        const handleInitialConnectionConfirmation = () => {
            log(`Server acknowledged my initial connection\n`);
        };

        const handleOnlineClients = data => {
            const { clients } = data;

            if (null != clients) {
                log(`\nOnline Clients:\t${stringify(clients)}\n`);

                const liParent = getElement("#online-chat-clients");

                removeChildren(liParent);

                for (c in clients) {
                    if (clients[c][2] == true || clients[c][2] == "true") {
                        const li = newElement("li");
                        const msgIcon = newElement("i");
                        const trashIcon = newElement("i");
                        const pUsername = newElement("input");
                        const dGroup = newElement("div");
                        const dGroupText = newElement("span");
                        const eGroupText = newElement("span");

                        addAttribute(li, "class", "list-group-item");
                        addAttribute(li, "id", `li-${clients[c][0]}`);
                        addAttribute(msgIcon, "id", `${clients[c][1]}`);
                        addAttribute(msgIcon, "class", "bi bi-chat-square-text-fill text-left send-message-icon action");
                        addAttribute(trashIcon, "id", `trash-${clients[c][1]}`);
                        addAttribute(trashIcon, "class", "bi bi-x-circle-fill text-left trash-icon action");
                        addAttribute(dGroup, "class", "input-group");
                        addAttribute(dGroupText, "class", "input-group-text");
                        addAttribute(eGroupText, "class", "input-group-text");
                        addAttribute(pUsername, "class", "form-control text-center fw-bold border-0");
                        addAttribute(pUsername, "type", "text");
                        addAttribute(pUsername, "readonly", "true");
                        addAttribute(pUsername, "value", `${cap(clients[c][0])}`);

                        appendChild(li, dGroup);
                        appendChild(dGroup, dGroupText);
                        appendChild(dGroupText, msgIcon);
                        appendChild(eGroupText, trashIcon);
                        appendChild(dGroup, pUsername);
                        appendChild(liParent, li);

                        if (clients[c][0].toLowerCase().trim() == userNameInput.value.toLowerCase().trim()) {
                            appendChild(dGroup, eGroupText);
                        }
                    }
                }
            }
        };

        document.addEventListener("DOMContentLoaded", function () {
            socket = new WebSocket("ws://192.168.1.57:8080/public/chat");

            socket.onopen = () => {
                log("Successfully connected");
                const jsonData = {};
                jsonData.action = "initialconnection";

                socket.send(stringify(jsonData));
            };

            socket.onclose = () => {
                log("Connection closed")
            };

            socket.onerror = () => {
                log("There was an error");
                log(socket)

            };

            socket.onmessage = msg => {
                let data = JSON.parse(msg.data);
                const action = data.action;
                const users = data.connected_clients;

                if (action) {
                    switch (action) {
                        case "confirmed":
                            handleComfirmation(data)
                            break;

                        case "clients":
                            populateOnlineUserCount(data);
                            break;

                        case "alert":
                            handlerAlert(data);
                            break;

                        case "badusername":
                            handleBadUsername(data);
                            break;

                        case "goodusername":
                            handleGoodUsername(data);
                            break;

                        case "online-clients":
                            handleOnlineClients(data);
                            break;

                        case "broadcast":
                            handleBroadcast(data);
                            break;

                        case "initialconnectionconfirmed":
                            handleInitialConnectionConfirmation();
                            break;

                    }
                }
            };
        });

        window.onbeforeunload = function () {
            log("Leaving chat room");
            const jsonData = {};

            jsonData.action = "left";
            jsonData.from = userNameInput.value;
            jsonData.id = idInput.value;

            socket.send(JSON.stringify(jsonData));
        };

        function sendMessage() {
            if (messageInput.value) {
                const jsonData = {};
                jsonData.message = messageInput.value;
                jsonData.action = "broadcast";
                jsonData.from = userNameInput.value;
                socket.send(stringify(jsonData));

                messageInput.value = "";
            }
        }

        function toggleShowChatWindow() {
            if (chatWindow.classList.contains("d-none")) {
                chatWindow.classList.remove("d-none");
                chatWindow.classList.add("d-flex");
                chatWindowToggle.innerText = "Hide Chat";
                addAttribute(chatWindowToggleLi, "class", "bg-primary fw-bold border rounded list-group-item nav-item");
                addAttribute(chatWindowToggle, "class", "text-white nav-link p-0 d-inline-block");
            } else {
                chatWindow.classList.remove("d-flex");
                chatWindow.classList.add("d-none");
                chatWindowToggle.innerText = "Show Chat";
                addAttribute(chatWindowToggleLi, "class", "bg-light-subtle fw-normal border rounded list-group-item nav-item");
                addAttribute(chatWindowToggle, "class", "text-black nav-link p-0 d-inline-block");
            }
        }

        function checkOnlineStatus(clients) {
            const onlineUsers = getElement("#online-users");
            const onlineClients = [];

            for (const c in clients) {
                const onlineStatus = clients[c][3];
                const id = clients[c][1];

                if (onlineStatus == true || onlineStatus == "true") {
                    onlineClients.push(id);

                }
            }

            onlineUsers.innerHTML = `<span class="fs-3"><strong>${onlineClients.length}</strong></span>`;
        }

        sendButton.addEventListener("click", () => {
            sendMessage();
        });

        chatWindowToggle.addEventListener("click", () => {
            toggleShowChatWindow();
        });

        submitButton.addEventListener("click", () => {
            if (usernameInput.value) {
                const jsonData = {};
                jsonData.action = "username";
                jsonData.message = usernameInput.value;
                jsonData.id = idInput.value
                socket.send(stringify(jsonData));
                usernameInput.value = "";
            }
        });

        onlineStatusCheckbox.addEventListener("click", e => {
            const id = e.target.id;
            const checked = e.target.checked;
            const jsonData = {};
            jsonData.id = idInput.value;
            jsonData.action = "showonlinestatus";
            jsonData.showonlinestatus = checked;
            socket.send(stringify(jsonData));

            onlineStatusLabel.innerText = checked ? "Online" : "Offline";
        });

        document.addEventListener("click", e => {
            const id = e.target.id;
            if (id.split("-")[1] == idInput.value) {
                log(`${userNameInput.value} has left the room\n`);
                jsonData = {};
                jsonData.action = "leftroom";
                jsonData.id = id.split("-")[1].trim();
                socket.send(stringify(jsonData));
                userNameInput.value = "";
                registerGroup.classList.remove("d-none");
                sendMessageGroup.classList.add("d-none");
            }
        });
    </script>
    {{end}}

    {{ if (isset(dashboard))}}
    <script>
        // Profile tab 
        const profileSubmitButtonGroup = document.querySelector("#profile-submit-button-group");
        const profileEditButtonGroup = document.querySelector("#profile-edit-button-group");
        const profileSubmitButton = document.querySelector("#profile-submit-button");
        const profileEditButton = document.querySelector("#profile-edit-button");
        const profileForm = document.querySelector("#profile-form");
        const inputs = document.querySelectorAll(".form-control");
        const fnameGroup = document.querySelector("#fname-group");
        const lnameGroup = document.querySelector("#lname-group");
        const unameGroup = document.querySelector("#uname-group");
        const addressGroup = document.querySelector("#address");
        const zipcodeGroup = document.querySelector("#zipcode");
        const emailGroup = document.querySelector("#email");
        const phoneGroup = document.querySelector("#phone");
        const stateGroup = document.querySelector("#state");
        const cityGroup = document.querySelector("#city");
        let toggler = false;
        const objInputs = {};
        const changedInputs = {};

        inputs.forEach(input => {
            objInputs[`${input.name.trim()}`] = { name: input.name.trim(), value: input.value.trim() };
        });

        const inputValueChanged = (inputName, value) => {
            const input = objInputs[inputName] || null;

            if (null != input) {
                return input.value != value;
            }
            return false;
        };

        const addChangedInput = (input) => {
            changedInputs[`${input.name}`] = input.value;
        };

        const removeChangedInput = (inputName) => {
            if (changedInputs.hasOwnProperty(inputName)) {
                delete changedInputs[`${inputName}`];
            }
        };

        const handleFormError = data => {
            if (data["fname"]) {
                const parentCount = countChildren(document.querySelector("#fname-group"));

                if (parentCount > 2) {
                    document.querySelector("#fname-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "fname-error");
                span.innerText = data["fname"];
                appendChild(document.querySelector("#fname-group"), span);

            } else {
                if (document.querySelector("#fname-error")) {
                    document.querySelector("#fname-error").remove();
                }
            }

            if (data["lname"]) {
                const parentCount = countChildren(document.querySelector("#lname-group"));

                if (parentCount > 2) {
                    document.querySelector("#lname-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "lname-error");
                span.innerText = data["lname"];
                appendChild(document.querySelector("#lname-group"), span);

            } else {
                if (document.querySelector("#lname-error")) {
                    document.querySelector("#lname-error").remove();
                }
            }


            if (data["uname"]) {
                const parentCount = countChildren(document.querySelector("#uname-group"));

                if (parentCount > 2) {
                    document.querySelector("#uname-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "uname-error");
                span.innerText = data["uname"];
                appendChild(document.querySelector("#uname-group"), span);

            } else {
                if (document.querySelector("#uname-error")) {
                    document.querySelector("#uname-error").remove();
                }
            }


            if (data["iurl"]) {
                const parentCount = countChildren(document.querySelector("#iurl-group"));

                if (parentCount > 2) {
                    document.querySelector("#iurl-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "iurl-error");
                span.innerText = data["iurl"];
                appendChild(document.querySelector("#iurl-group"), span);

            } else {
                if (document.querySelector("#iurl-error")) {
                    document.querySelector("#iurl-error").remove();
                }
            }

            if (data["email"]) {
                const parentCount = countChildren(document.querySelector("#email-group"));

                if (parentCount > 2) {
                    document.querySelector("#email-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "email-error");
                span.innerText = data["email"];
                appendChild(document.querySelector("#email-group"), span);

            } else {
                if (document.querySelector("#email-error")) {
                    document.querySelector("#email-error").remove();
                }
            }

            if (data["phone"]) {
                const parentCount = countChildren(document.querySelector("#phone-group"));

                if (parentCount > 2) {
                    document.querySelector("#phone-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "phone-error");
                span.innerText = data["phone"];
                appendChild(document.querySelector("#phone-group"), span);

            } else {
                if (document.querySelector("#phone-error")) {
                    document.querySelector("#phone-error").remove();
                }
            }

            if (data["address"]) {
                const parentCount = countChildren(document.querySelector("#address-group"));

                if (parentCount > 2) {
                    document.querySelector("#address-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "address-error");
                span.innerText = data["address"];
                appendChild(document.querySelector("#address-group"), span);

            } else {
                if (document.querySelector("#address-error")) {
                    document.querySelector("#address-error").remove();
                }
            }

            if (data["city"]) {
                const parentCount = countChildren(document.querySelector("#city-group"));

                if (parentCount > 2) {
                    document.querySelector("#city-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "city-error");
                span.innerText = data["city"];
                appendChild(document.querySelector("#city-group"), span);

            } else {
                if (document.querySelector("#city-error")) {
                    document.querySelector("#city-error").remove();
                }
            }

            if (data["state"]) {
                const parentCount = countChildren(document.querySelector("#state-group"));

                if (parentCount > 2) {
                    document.querySelector("#state-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "state-error");
                span.innerText = data["state"];
                appendChild(document.querySelector("#state-group"), span);

            } else {
                if (document.querySelector("#state-error")) {
                    document.querySelector("#state-error").remove();
                }
            }

            if (data["zipcode"]) {
                const parentCount = countChildren(document.querySelector("#zipcode-group"));

                if (parentCount > 2) {
                    document.querySelector("#zipcode-group").lastChild.remove();
                }

                const span = newElement("span");
                addAttribute(span, "class", "input-group-text text-danger");
                addAttribute(span, "id", "zipcode-error");
                span.innerText = data["zipcode"];
                appendChild(document.querySelector("#zipcode-group"), span);

            } else {
                if (document.querySelector("#zipcode-error")) {
                    document.querySelector("#zipcode-error").remove();
                }
            }
        }

        const handleFormSuccess = () => {
            log(`User updated\n`);

            // remove all error messages 
            if (document.querySelector("#fname-error")) {
                document.querySelector("#fname-error").remove();
            }

            if (document.querySelector("#lname-error")) {
                document.querySelector("#lname-error").remove();
            }

            if (document.querySelector("#uname-error")) {
                document.querySelector("#uname-error").remove();
            }

            if (document.querySelector("#email-error")) {
                document.querySelector("#email-error").remove();
            }

            if (document.querySelector("#phone-error")) {
                document.querySelector("#phone-error").remove();
            }

            if (document.querySelector("#iurl-error")) {
                document.querySelector("#iurl-error").remove();
            }

            if (document.querySelector("#address-error")) {
                document.querySelector("#address-error").remove();
            }

            if (document.querySelector("#city-error")) {
                document.querySelector("#city-error").remove();
            }

            if (document.querySelector("#state-error")) {
                document.querySelector("#state-error").remove();
            }

            if (document.querySelector("#zipcode-error")) {
                document.querySelector("#zipcode-error").remove();
            }

            location.href = "/user";
        };

        const submitProfileForm = () => {
            const url = '/user/profile';
            const formData = new FormData(profileForm);
            formData.append("csrf_token", "{{.csrftoken}}");

            log(`Sending form data: ${stringify(formData)}\n`);

            try {
                fetch("/user/profile", {
                    method: "post",
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data["ok"] == false) {
                            handleFormError(data);
                        } else {
                            handleFormSuccess();
                        }
                    });
            } catch (err) {
                log(err);
            }
        };

        profileForm.addEventListener("submit", e => {
            e.preventDefault();
            log(`Profile form submitted\n`);
            try {
                submitProfileForm();
            } catch (err) {
                log(err);
            }
            return;
        });

        profileEditButton.addEventListener("click", () => {
            toggler = !toggler;
            log(`Edit button clicked\n`);
            if (toggler) {
                inputs.forEach(input => {
                    // log(`${input.name}\n`);
                    input.removeAttribute("readonly");
                });
                profileEditButton.classList.remove("btn-success");
                profileEditButton.classList.add("btn-warning");
            } else {
                inputs.forEach(input => {
                    // log(`${input.name}\n`);
                    if (!input.hasAttribute("readonly")) {
                        input.setAttribute("readonly", "");
                    }
                });
                profileEditButton.classList.remove("btn-warning");
                profileEditButton.classList.add("btn-success");
            }
        });

        inputs.forEach(input => {
            input.addEventListener("keyup", e => {
                if (inputValueChanged(e.target.name.trim(), e.target.value.trim())) {
                    // log(`Element ${e.target.name}'s value has changed\n`);
                    addChangedInput(e.target);
                } else {
                    // log(`Element ${e.target.name}'s value was changed back\n`);
                    removeChangedInput(e.target.name.trim());
                }

                if (Object.keys(changedInputs).length > 0) {
                    profileSubmitButtonGroup.classList.remove("d-none");
                    profileEditButton.innerText = "Save";
                } else {
                    if (!profileEditButtonGroup.classList.contains("d-none")) {
                        profileSubmitButtonGroup.classList.add("d-none");
                        profileEditButton.innerText = "Edit";
                    }
                }
            });
        });

        // Settings tab 
        const settingsForm = document.querySelector("#settings-form");
        const handleSettingsFormError = () => {
            log(`Settings form submission failed\n`);
        };
        const handleSettingsFormSuccess = () => {
            log(`Settings form submission succeeded\n`);
            location.href = "/user";
        };
        const submitSettingsForm = () => {
            const url = '/user/settings';
            const formData = new FormData(settingsForm);
            formData.append("csrf_token", "{{.csrftoken}}");
            log(`Sending form data: ${stringify(formData)}\n`);
            try {
                fetch("/user/settings", {
                    method: "post",
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data["ok"] == false) {
                            handleSettingsFormError(data);
                        } else {
                            handleSettingsFormSuccess();
                        }
                    });
            } catch (err) {
                log(err);
            }
        };

        settingsForm.addEventListener("submit", e => {
            e.preventDefault();
            log(`Settings form submitted\n`);
            try {
                submitSettingsForm();
            } catch (err) {
                log(err);
            }
            return;
        });

    </script>
    {{end}}

</body>

</html>