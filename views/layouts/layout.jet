{{import "../partials/_menu"}}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="favicon" sizes="180x180" href="/static/favicon.ico">
    <style>
        .notie-container {
            box-shadow: none;
        }
    </style>
    <title>{{ isset(title) ? title : "" }}</title>
</head>

<body>
    {{yield menu()}}
    <div class="container-fluid" style="margin:2% auto;">
        {{block documentBody()}}{{end}}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous">
        </script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
        integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const log = (msg) => console.log(msg);

        const stringify = (obj) => JSON.stringify(obj);

        const parser = (strObj) => JSON.parse(strObj);

        const addHandler = (theElement, whichEvent, method) => {
            if (null != theElement && null != whichEvent && typeof method == "function") {
                theElement.addEventListener(whichEvent, method);
            }
        };

        const addClickHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "click", handler);
            }
        };

        const addKeyupHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "keyup", handler);
            }
        };

        const addKeydownHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "keydown", handler);
            }
        };

        const addOnFocusHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "focus", handler);
            }
        };

        const addOnChangeHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "change", handler);
            }
        };

        const addOffFocusHandler = (theElement, handler) => {
            if (null != theElement && typeof handler == "function") {
                addHandler(theElement, "focusout", handler);
            }
        };

        const appendChild = (parent, child) => {
            if (null != parent && null != child) {
                parent.appendChild(child);
            }
        };

        const appendBeforeLastChild = (parent, child) => {
            if (null != parent && null != child) {
                const lastChildIndex = parent.children.length - 1;
                const lastChild = parent.children[lastChildIndex];
                parent.insertBefore(child, lastChild);
            }
        };

        const append = (parent, child) => {
            parent.append(child);
        };

        const removeChildren = (parent) => {
            parent.querySelectorAll("*").forEach((dialog) => {
                dialog.remove();
            });
        };

        const countChildren = (parent) => {
            if (null != parent) {
                return parent.children.length;
            }
            return null;
        };

        const addAttribute = (theElement, whichAttribute, attributeValue) => {
            if (null != theElement) {
                theElement.setAttribute(whichAttribute, attributeValue);
            }
        };

        const setAttribute = (theElement, whichAttribute, attributeValue) => {
            if (null != theElement) {
                theElement.setAttribute(whichAttribute, attributeValue);
            }
        };

        const getAttribute = (theElement, whichAttribute) => {
            if (null != theElement && null != whichAttribute) {
                return theElement.getAttribute(`${whichAttribute}`) || null;
            }
            return "Element is null";
        };

        const removeAttribute = (theElement, whichAttribute) => {
            if (null != theElement) {
                if (theElement.hasAttribute(whichAttribute)) {
                    theElement.removeAttribute(whichAttribute);
                }
            }
        };

        const getElement = (nameIdClass) => {
            let element = null;
            if (null != (element = document.querySelector(`${nameIdClass}`))) {
                return element;
            }
            if (null != (element = document.querySelector(`#${nameIdClass}`))) {
                return element;
            }
            if (null != (element = document.querySelector(`.${nameIdClass}`))) {
                return element;
            }
            return null;
        };

        const cap = (arg) => {
            let word_split = null,
                line = "",
                word = arg.toString();
            if (null !== word && undefined !== word) {
                if (
                    word.trim().toLowerCase() === "id" ||
                    word.trim().toLowerCase() === "ssn" ||
                    word.trim().toLowerCase() === "sku" ||
                    word.trim().toLowerCase() === "vm" ||
                    word.trim().toLowerCase() === "mac" ||
                    word.trim().toLowerCase() === "imei" ||
                    word.trim().toLowerCase() === "os" ||
                    word.trim().toLowerCase() === "atm" ||
                    word.trim().toLowerCase() === "pa" ||
                    word.trim().toLowerCase() === "rjw"
                ) {
                    return word.toUpperCase();
                } else if (word.match(/[-]/)) {
                    if (null !== (word_split = word.split(["-"])).length > 0) {
                        for (let i = 0; i < word_split.length; i++) {
                            if (i < word_split.length - 1) {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1) +
                                    "-";
                            } else {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1);
                            }
                        }
                        return line;
                    }
                } else if (word.match(/[ ]/)) {
                    if (null !== (word_split = word.split([" "])).length > 0) {
                        for (let i = 0; i < word_split.length; i++) {
                            if (i < word_split.length - 1) {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1) +
                                    " ";
                            } else {
                                line +=
                                    word_split[i].substring(0, 1).toUpperCase() +
                                    word_split[i].substring(1);
                            }
                        }
                        return line;
                    }
                } else {
                    return word.substring(0, 1).toUpperCase() + word.substring(1);
                }
            }
        };

        const newElement = (type) => {
            if (null != type && typeof type == "string") {
                return document.createElement(type);
            }
            return null;
        };

        // notify display a custom alert to user 
        // type string: success, error or warning
        // msg string: message to user 
        const notify = (type, msg) => {
            notie.alert({
                type: type,
                text: msg,
            });
        };

        // modal display custom modal 
        // title string: modal's title 
        // text string: the message to user
        // icon built-in: success, warning, error, info or question
        // btnText string: button's text
        const modal = (title, text, icon, btnText = "Okay", btnClose = true, showStatus = true) => {
            Swal.fire({
                title: title,
                text: text,
                icon: icon,
                confirmButtonText: btnText,
                showCloseButton: btnClose,
                showLoading: showStatus
            });
        };

    </script>

    {{ if (isset(dashboard) ? true : false) }}
    <script>
        let socket = null;
        const idInput = document.querySelector("#id");
        const idComp = document.querySelector("#ipaddress")
        const chatWindow = document.querySelector("#chat-window");
        const chatWindowToggle = document.querySelector("#chat-window-toggle");
        const submitButton = document.querySelector("#submit-button");
        const registerGroup = document.querySelector("#register-group");
        const usernameInput = document.querySelector("#username-input");
        const sendMessageGroup = document.querySelector("#send-message-group");
        const sendMButton = document.querySelector("#send-button");
        const messageInput = document.querySelector("#message-input");
        const userNameInput = document.querySelector("#username");


        const populateUserList = data => {
            log(`Server refreshed client list\n`);

            const list = data.connected_clients;
            const userList = document.querySelector("#user-list");
            const onlineUsers = getElement("#online-users");
            if (list) {
                onlineUsers.innerHTML = `<span class="fs-3"><strong>${list.length}</strong></span>`;
            }
        };

        const handleBroadcast = (data) => {
            const message = data.message;
            const from = data.from;
            const para = newElement("p");
            para.innerHTML = `${message}`;
        }

        const handleAlert = data => {
            const title = data.title;
            const message = data.message;
            const level = data.level;
            modal(title, message, level);
        };

        const handleBadUsername = data => {
            log("username is bad");
            const title = data.title;
            const level = data.level;
            const message = data.message;

            modal(title, message, level);
        };

        const handleGoodUsername = data => {
            const username = data.message;
            userNameInput.value = username;
            registerGroup.classList.add("d-none");
            sendMessageGroup.classList.remove("d-none");

            const jsonData = {};
            jsonData.action = "chat-users";
            socket.send(stringify(jsonData));
        };

        const handleComfirmation = data => {
            log(`Server confirmed my connection\n`);
            const id = data.id;
            const clients = data.connected_clients;

            idInput.value = id;
            idComp.innerText = `${id}`;
            const jsonData = {};
            jsonData.action = "thankyou";
            socket.send(stringify(jsonData));
        };

        document.addEventListener("DOMContentLoaded", function () {
            socket = new WebSocket("ws://192.168.1.47:8080/ws");

            socket.onopen = () => {
                log("Successfully connected");
                const jsonData = {};
                jsonData.action = "initialconnection";

                socket.send(stringify(jsonData));
            };

            socket.onclose = () => {
                log("Connection closed")
            };

            socket.onerror = () => {
                log("There was an error")
            };

            socket.onmessage = msg => {
                let data = JSON.parse(msg.data);
                const action = data.action;
                const users = data.connected_clients;

                if (action) {
                    switch (action) {
                        case "confirmed":
                            handleComfirmation(data)
                            break;

                        case "clients":
                            populateUserList(data);
                            break;

                        case "alert":
                            handlerAlert(data);
                            break;

                        case "badusername":
                            handleBadUsername(data);
                            break;

                        case "goodusername":
                            handleGoodUsername(data);
                            break;

                        case "chat-users":
                            handleChatUsers(data);
                            break;
                    }
                }

            };

        });

        window.onbeforeunload = function () {
            log("Leaving chat room");
            const jsonData = {};

            jsonData.action = "left";

            socket.send(JSON.stringify(jsonData));
        };

        function toggleShowChatWindow() {
            if (chatWindow.classList.contains("d-none")) {
                chatWindow.classList.remove("d-none");
                chatWindow.classList.add("d-flex");
                chatWindowToggle.innerText = "Hide Chat";
            } else {
                chatWindow.classList.remove("d-flex");
                chatWindow.classList.add("d-none");
                chatWindowToggle.innerText = "Show Chat";
            }
        }

        chatWindowToggle.addEventListener("click", () => {
            toggleShowChatWindow();
        });

        submitButton.addEventListener("click", () => {
            if (usernameInput.value) {
                const jsonData = {};
                jsonData.action = "username";
                jsonData.message = usernameInput.value;
                jsonData.id = idInput.value
                socket.send(stringify(jsonData));
                usernameInput.value = "";
            }
        });
    </script>
    {{end}}
</body>

</html>